/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
import java_cup.runtime.*;

parser code {:
    // Connect this parser to a scanner!
    Lexer lex;
    String result;
    Parser(String input){ 
    this.lex= new Lexer(input); 
    }
:}

/* define how to connect to the scanner! */
init with {: lex.init(); :};
scan with {: return lex.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, TIMES, UMINUS, LPAREN, RPAREN, SQRT;
terminal Double    NUMBER;        // our scanner provides numbers as integers

/* Non terminals */
non terminal            stmt;
non terminal Double    expr;      // used to store evaluated subexpressions

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;

/* The grammar rules */
stmt ::=  expr:e        {: parser.result=e.toString();:} | /*empty*/
;
expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = e1+e2;       :}
             | expr:e1 MINUS expr:e2        {: RESULT = e1-e2;       :}
             | expr:e1 TIMES expr:e2        {: RESULT = e1*e2;       :}
             | MINUS expr:e                 {: RESULT = -e;          :} %prec UMINUS
       		 | LPAREN expr:e RPAREN	         {: RESULT = e;           :}
       		 | SQRT LPAREN expr:e RPAREN     {: RESULT = java.lang.Math.sqrt(e);      :}
             | NUMBER:n	                     {: RESULT = n;           :}
             ;
